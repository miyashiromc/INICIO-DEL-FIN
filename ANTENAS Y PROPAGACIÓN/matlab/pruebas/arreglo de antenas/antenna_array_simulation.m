function antenna_array_simulation
    % Configuración principal de la figura
    fig = figure('Name', 'Simulación de Arreglo de Dipolos - Versión Estable', ...
                'NumberTitle', 'off', ...
                'Position', [100, 100, 1350, 950], ...
                'Color', [0.96 0.96 0.96], ...
                'MenuBar', 'none', ...
                'ToolBar', 'figure');
    
    %% Panel de controles (20% del ancho)
    controlPanel = uipanel('Parent', fig, ...
                         'Title', 'CONTROL DEL ARREGLO', ...
                         'Position', [0.02 0.02 0.20 0.96], ...
                         'BackgroundColor', [0.94 0.94 0.94], ...
                         'FontSize', 11, ...
                         'FontWeight', 'bold', ...
                         'ForegroundColor', [0.2 0.2 0.6]);
    
    % Variables para almacenar el estado de rotación
    currentView = [30, 30]; % Almacena azimut y elevación
    
    % Espaciado vertical entre controles
    verticalSpacing = 75;
    currentY = 400;
    
    % Control para número de elementos
    uicontrol('Parent', controlPanel, ...
              'Style', 'text', ...
              'Position', [25 currentY 160 22], ...
              'String', 'Número de elementos (N):', ...
              'FontSize', 10, ...
              'FontWeight', 'bold', ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', [0.94 0.94 0.94]);
    
    N_slider = uicontrol('Parent', controlPanel, ...
                        'Style', 'slider', ...
                        'Position', [25 currentY-28 140 20], ...
                        'Min', 1, 'Max', 20, 'Value', 4, ...
                        'SliderStep', [1/19 2/19], ...
                        'BackgroundColor', [0.9 0.9 0.9]);
    
    N_label = uicontrol('Parent', controlPanel, ...
                       'Style', 'text', ...
                       'Position', [175 currentY-28 30 20], ...
                       'String', '4', ...
                       'FontSize', 9, ...
                       'FontWeight', 'bold', ...
                       'BackgroundColor', [0.94 0.94 0.94], ...
                       'ForegroundColor', [0.2 0.2 0.8]);
    
    currentY = currentY - verticalSpacing;
    
    % Control para separación entre elementos
    uicontrol('Parent', controlPanel, ...
              'Style', 'text', ...
              'Position', [25 currentY 160 22], ...
              'String', 'Separación (d/λ):', ...
              'FontSize', 10, ...
              'FontWeight', 'bold', ...
              'HorizontalAlignment', 'left', ...
              'BackgroundColor', [0.94 0.94 0.94]);
    
    d_slider = uicontrol('Parent', controlPanel, ...
                        'Style', 'slider', ...
                        'Position', [25 currentY-28 140 20], ...
                        'Min', 0.1, 'Max', 2, 'Value', 0.5, ...
                        'SliderStep', [0.1/1.9 0.2/1.9], ...
                        'BackgroundColor', [0.9 0.9 0.9]);
    
    d_label = uicontrol('Parent', controlPanel, ...
                       'Style', 'text', ...
                       'Position', [175 currentY-28 30 20], ...
                       'String', '0.5', ...
                       'FontSize', 9, ...
                       'FontWeight', 'bold', ...
                       'BackgroundColor', [0.94 0.94 0.94], ...
                       'ForegroundColor', [0.2 0.2 0.8]);
    
    %% Panel de visualización (78% del ancho)
    visPanel = uipanel('Parent', fig, ...
                      'Title', 'VISUALIZACIÓN DEL PATRÓN', ...
                      'Position', [0.22 0.02 0.76 0.96], ...
                      'BackgroundColor', [0.96 0.96 0.96], ...
                      'FontSize', 11, ...
                      'FontWeight', 'bold', ...
                      'ForegroundColor', [0.2 0.2 0.6]);
    
    % Gráfico 3D principal (60% superior)
    ax_3d = axes('Parent', visPanel, ...
                'Position', [0.10 0.45 0.80 0.50], ...
                'Box', 'on', ...
                'FontSize', 9);
    
    % Habilitar rotación 3D con callback para guardar vista
    rotate3d(ax_3d);
    set(ax_3d, 'ButtonDownFcn', @storeCurrentView);
    
    % Gráficos polares para cortes (40% inferior)
    ax_h = polaraxes('Parent', visPanel, ...
                   'Position', [0.10 0.08 0.35 0.30]);
    
    ax_e = polaraxes('Parent', visPanel, ...
                   'Position', [0.55 0.08 0.35 0.30]);
    
    %% Información adicional
    infoPanel = uipanel('Parent', controlPanel, ...
                       'Title', 'INFORMACIÓN', ...
                       'Position', [0.05 0.05 0.90 0.18], ...
                       'BackgroundColor', [0.92 0.94 0.98], ...
                       'FontSize', 9, ...
                       'FontWeight', 'bold');
    
    infoText = uicontrol('Parent', infoPanel, ...
                        'Style', 'text', ...
                        'Position', [10 5 170 60], ...
                        'String', sprintf('ARREGLO LINEAL\n• Dipolo λ/2\n• N: 1-20\n• d: 0.1λ-2.0λ'), ...
                        'FontSize', 9, ...
                        'FontWeight', 'bold', ...
                        'HorizontalAlignment', 'center', ...
                        'BackgroundColor', [0.92 0.94 0.98]);
    
    %% Funciones auxiliares
    function storeCurrentView(~,~)
        % Guarda la vista actual al interactuar con el gráfico 3D
        currentView = get(ax_3d, 'View');
    end
    
    %% Función de actualización mejorada
    function update_plots(~,~)
        N = round(get(N_slider, 'Value'));
        d = get(d_slider, 'Value');
        
        set(N_label, 'String', num2str(N));
        set(d_label, 'String', num2str(d, 2));
        
        % Cálculo del patrón
        [theta, phi, F] = calculate_radiation_pattern(N, d);
        
        % Visualización 3D manteniendo la vista actual
        cla(ax_3d);
        F_norm = F / max(F(:));
        [x, y, z] = sph2cart(phi, pi/2-theta, F_norm);
        surf(ax_3d, x, y, z, F_norm, 'EdgeColor', 'none', 'FaceAlpha', 0.85);
        axis(ax_3d, 'equal');
        colormap(ax_3d, 'jet');
        c = colorbar(ax_3d, 'Location', 'eastoutside');
        c.Label.String = 'Ganancia Norm.';
        c.Label.FontSize = 8;
        c.Label.FontWeight = 'bold';
        xlabel(ax_3d, 'X (λ)', 'FontSize', 9);
        ylabel(ax_3d, 'Y (λ)', 'FontSize', 9);
        zlabel(ax_3d, 'Z (λ)', 'FontSize', 9);
        title(ax_3d, sprintf('PATRÓN 3D - N=%d, d=%.2fλ', N, d), 'FontSize', 10);
        view(ax_3d, currentView); % Restaura la vista guardada
        grid(ax_3d, 'on');
        shading(ax_3d, 'interp');
        
        % Re-habilitar rotación después de actualizar
        rotate3d(ax_3d);
        set(ax_3d, 'ButtonDownFcn', @storeCurrentView);
        
        % Corte H (plano XY)
        cla(ax_h);
        idx = abs(theta(1,:) - pi/2) < 0.01;
        if any(idx)
            polarplot(ax_h, phi(:,idx), F(:,idx)/max(F(:)), 'LineWidth', 1.8, 'Color', [0 0.4 0.8]);
            title(ax_h, sprintf('CORTE H (XY)\nN=%d, d=%.2fλ', N, d), 'FontSize', 9);
            ax_h.RLim = [0 1]; % Forma correcta de establecer límites radiales
            ax_h.ThetaZeroLocation = 'top';
            ax_h.FontSize = 8;
        end
        
        % Corte E (plano XZ)
        cla(ax_e);
        theta_e = linspace(0, 2*pi, 361)';
        Fe = abs(cos(pi/2*cos(theta_e))) ./ abs(sin(theta_e));
        Fe(theta_e==0 | theta_e==pi) = 0;
        psi = 2*pi * d * sin(theta_e);
        Fa = sin(N*psi/2) ./ (N*sin(psi/2));
        Fa(psi==0) = 1;
        F_e = Fe.*abs(Fa)/max(Fe.*abs(Fa));
        
        polarplot(ax_e, theta_e, F_e, 'LineWidth', 1.8, 'Color', [0.8 0.2 0.2]);
        title(ax_e, sprintf('CORTE E (XZ)\nN=%d, d=%.2fλ', N, d), 'FontSize', 9);
        ax_e.ThetaTick = 0:30:330;
        ax_e.RLim = [0 1]; % Forma correcta de establecer límites radiales
        ax_e.ThetaZeroLocation = 'top';
        ax_e.FontSize = 8;
    end

    % Configurar callbacks
    set(N_slider, 'Callback', @update_plots);
    set(d_slider, 'Callback', @update_plots);
    
    % Ejecutar primera actualización
    update_plots();
end

function [theta, phi, F] = calculate_radiation_pattern(N, d)
    % Rejilla angular optimizada
    [theta, phi] = meshgrid(linspace(0, pi, 181), linspace(0, 2*pi, 361));
    
    % Patrón del elemento dipolo
    Fe = abs(cos(pi/2*cos(theta)) ./ sin(theta));
    Fe(theta==0 | theta==pi) = 0;
    
    % Factor de arreglo
    psi = 2*pi * d * sin(theta) .* cos(phi);
    Fa = sin(N*psi/2) ./ (N*sin(psi/2));
    Fa(psi==0) = 1;
    
    F = Fe .* abs(Fa);
end